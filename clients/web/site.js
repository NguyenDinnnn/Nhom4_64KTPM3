// ---------------- Bi·∫øn to√†n c·ª•c ----------------
let gridSizeX = 10, gridSizeY = 8;
let robotPos = [0, 0], goal = [9, 7], obstacles = [], waypoints = [], visitedWaypoints = [];
let autoMoving = false, algoMoving = false, intervalId = null, debugMode = false, currentAlgo = null;
let startTime = null, endTime = null, trajectoryPoints = [];
let allAlgoData = {};
let sessionId = null; // BI·∫æN M·ªöI: L∆∞u ID c·ªßa phi√™n l√†m vi·ªác

// ---------------- Chart ----------------
const ctx = document.getElementById('rewardChart').getContext('2d');
const rewardChart = new Chart(ctx, {
    type: 'line',
    data: { labels: [], datasets: [] },
    options: {
        responsive:true,
        plugins:{ title:{ display:true, text:'Reward theo Step' } },
        scales:{ x:{ title:{ display:true, text:'Step' } }, y:{ title:{ display:true, text:'Reward' } } }
    }
});

function randomColor(alpha=1){
    const r=Math.floor(Math.random()*255), g=Math.floor(Math.random()*255), b=Math.floor(Math.random()*255);
    return `rgba(${r},${g},${b},${alpha})`;
}

function updateChart() {
    rewardChart.data.datasets = [];
    let maxSteps = 0;
    
    for (const algo in allAlgoData) {
        if (allAlgoData[algo].rewards.length > maxSteps) {
            maxSteps = allAlgoData[algo].rewards.length;
        }
    }
    rewardChart.data.labels = Array.from({length: maxSteps}, (_, i) => i + 1);

    for (const algo in allAlgoData) {
        rewardChart.data.datasets.push({
            label: algo,
            data: allAlgoData[algo].rewards,
            borderColor: allAlgoData[algo].color,
            backgroundColor: allAlgoData[algo].color.replace('rgb', 'rgba').replace(')', ', 0.2)'),
            fill: false,
            tension: 0.3,
            pointRadius: 0
        });
    }
    rewardChart.update();
}

// ---------------- Grid & Robot ----------------
function drawGridOnce(){
    let grid=document.getElementById("grid");
    grid.style.gridTemplateColumns=`repeat(${gridSizeX},35px)`;
    grid.innerHTML="";
    for(let y=0;y<gridSizeY;y++){
        for(let x=0;x<gridSizeX;x++){
            let cell=document.createElement("div");
            cell.classList.add("cell");
            cell.dataset.x=x; cell.dataset.y=y;
            if(obstacles.some(o=>o[0]===x&&o[1]===y)) cell.classList.add("obstacle");
            if(waypoints.some(w=>w[0]===x&&w[1]===y && !visitedWaypoints.some(vw=>vw[0]===w[0] && vw[1]===w[1]))) cell.classList.add("waypoint");
            if(x===goal[0]&&y===goal[1]) cell.classList.add("goal");
            if(x===robotPos[0]&&y===robotPos[1]) { cell.classList.add("robot"); cell.innerHTML="ü§ñ"; }
            grid.appendChild(cell);
        }
    }
}

function updateRobot(prevPos, newPos){
    let grid=document.getElementById("grid");
    let oldCell=grid.querySelector(`.cell[data-x='${prevPos[0]}'][data-y='${prevPos[1]}']`);
    if(oldCell){ oldCell.classList.remove("robot"); oldCell.innerHTML=""; }
    let newCell=grid.querySelector(`.cell[data-x='${newPos[0]}'][data-y='${newPos[1]}']`);
    if(newCell){ newCell.classList.add("robot"); newCell.innerHTML="ü§ñ"; }
    trajectoryPoints.push([...newPos]);

    if(newPos[0]===goal[0] && newPos[1]===goal[1]){
        endTime = performance.now();
        let elapsed = ((endTime - startTime)/1000).toFixed(2);
        document.getElementById("current-time").innerText = elapsed + " s";
        drawTrajectory();
    }

    waypoints.forEach(w=>{
        if(w[0]===newPos[0] && w[1]===newPos[1]){
            newCell.classList.remove("waypoint"); newCell.classList.add("visited"); newCell.innerHTML="ü§ñ";
            if(!visitedWaypoints.some(vw=>vw[0]===w[0] && vw[1]===w[1])) visitedWaypoints.push([w[0],w[1]]);
        }
    });
}

// ---------------- Manual & Debug ----------------
async function manualMove(dir){
    if(!debugMode || !sessionId) return;
    let prevPos = [...robotPos];
    let resp = await fetch("/step",{
        method:"POST",
        headers:{"Content-Type":"application/json"},
        body:JSON.stringify({action_name:dir, session_id: sessionId}) // Th√™m session_id
    });
    let data=await resp.json();
    if(!data.error){
        robotPos = data.state;
        visitedWaypoints = data.visited_waypoints || [];
        updateRobot(prevPos, robotPos);
    }
}

function toggleDebug(){
    debugMode = !debugMode;
    document.getElementById("manualControls").style.display = debugMode?"block":"none";
}

// ---------------- Auto Move (Removed - Logic integrated into algorithms) ----------------

function stopAll(){
    autoMoving=false; algoMoving=false; currentAlgo=null;
    if(intervalId) clearInterval(intervalId);
    intervalId=null;
    document.getElementById("msg").innerText="ƒê√£ d·ª´ng robot";
    document.getElementById("algoResult").style.display = "none";
    
    // B·∫≠t l·∫°i c√°c n√∫t thu·∫≠t to√°n
    document.querySelectorAll('.btn-algorithm').forEach(btn => btn.disabled = false);
}

// ---------------- Session & Reset ----------------
async function initializeSession() {
    try {
        const response = await fetch("/sessions/create", { method: "POST" });
        const data = await response.json();
        if (data.session_id) {
            sessionId = data.session_id;
            console.log("Session created:", sessionId);
            await resetGrid(); // Reset grid cho session m·ªõi
        } else {
            document.getElementById("msg").innerText = "L·ªói: Kh√¥ng th·ªÉ t·∫°o session.";
        }
    } catch (e) {
        console.error("Failed to create session:", e);
        document.getElementById("msg").innerText = "L·ªói k·∫øt n·ªëi t·ªõi server.";
    }
}

async function resetGrid(){
    stopAll();
    if (!sessionId) {
        document.getElementById("msg").innerText = "L·ªói: Ch∆∞a c√≥ session ID.";
        return;
    }
    let resp = await fetch("/reset",{
        method:"POST",
        headers:{"Content-Type":"application/json"},
        body:JSON.stringify({ session_id: sessionId }) // Th√™m session_id
    });
    let data = await resp.json();
    if (data.error) {
        document.getElementById("msg").innerText = `L·ªói: ${data.error}`;
        return;
    }
    robotPos=data.state; goal=data.map.goal; obstacles=data.map.obstacles; waypoints=data.map.waypoints||[];
    visitedWaypoints=[]; gridSizeX=data.map.width; gridSizeY=data.map.height;
    drawGridOnce(); updateRobot([0,0], robotPos);
    document.getElementById("msg").innerText="M√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c reset";
    document.getElementById("current-time").innerText="-";
    trajectoryPoints=[]; clearTrajectory();
}

// ---------------- Run RL Algorithms step-by-step ----------------
async function runAlgorithm(algo){
    stopAll();
    currentAlgo = algo;
    allAlgoData[algo] = { rewards: [], color: randomColor() };
    let totalReward = 0;
    let steps = 0;
    
    const resultDiv = document.getElementById("algoResult");
    resultDiv.style.display = "block";
    resultDiv.innerHTML = `<div class="loading"></div> ƒêang ch·∫°y thu·∫≠t to√°n ${algo}...`;
    
    // V√¥ hi·ªáu h√≥a c√°c n√∫t kh√°c
    document.querySelectorAll('.btn-algorithm').forEach(btn => btn.disabled = true);

    // Reset tr·∫°ng th√°i tr∆∞·ªõc khi ch·∫°y
    await resetGrid();
    
    // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p t·ª´ng b∆∞·ªõc
    intervalId = setInterval(async () => {
        try {
            let prevPos = [...robotPos];
            const resp = await fetch("/step_algorithm", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ algorithm: algo, session_id: sessionId }) // Th√™m session_id
            });
            const data = await resp.json();

            if (data.error) {
                resultDiv.innerHTML = `‚ùå L·ªói: ${data.error}`;
                stopAll();
                return;
            }

            robotPos = data.state;
            visitedWaypoints = data.visited_waypoints || [];
            updateRobot(prevPos, robotPos);
            
            totalReward += data.reward;
            steps = data.steps;
            allAlgoData[algo].rewards.push(totalReward);
            
            updateStats(
                algo,
                totalReward.toFixed(1),
                steps,
                `${visitedWaypoints.length}/${waypoints.length}`
            );

            if (data.done) {
                resultDiv.innerHTML = `
                    ‚úÖ <strong>${algo}</strong><br>
                    üéØ Reward: ${totalReward.toFixed(1)}<br>
                    üë£ Steps: ${steps}<br>
                    üìç Waypoints: ${visitedWaypoints.length}/${waypoints.length}<br>
                    üèÜ <strong>Robot ƒë√£ ƒë·∫øn ƒë√≠ch!</strong>
                `;
                stopAll();
            } else {
                resultDiv.innerHTML = `<div class="loading"></div> ƒêang ch·∫°y thu·∫≠t to√°n ${algo}...`;
            }

            updateChart();
        } catch (e) {
            console.error(e);
            resultDiv.innerHTML = "‚ùå C√≥ l·ªói x·∫£y ra khi ch·∫°y thu·∫≠t to√°n";
            stopAll();
        }
    }, 200);
}

// ---------------- Run A* ----------------
async function runAStar(){
    stopAll(); 
    currentAlgo="A*";
    const resultDiv = document.getElementById("algoResult");
    resultDiv.style.display = "block";
    resultDiv.innerHTML = `<div class="loading"></div> ƒêang ch·∫°y thu·∫≠t to√°n A*...`;
    document.querySelectorAll('.btn-algorithm').forEach(btn => btn.disabled = true);

    try{
        let prevPos = [...robotPos];
        const resp = await fetch("/run_a_star",{
            method:"POST",
            headers:{"Content-Type":"application/json"},
            body:JSON.stringify({ session_id: sessionId }) // Th√™m session_id
        });
        const data = await resp.json();
        if(data.error){ resultDiv.innerHTML = `‚ùå L·ªói: ${data.error}`; stopAll(); return; }
        
        allAlgoData[data.algorithm] = { rewards: data.rewards_over_time, color: randomColor() };

        let path = data.path;
        // D√πng v√≤ng l·∫∑p for thay v√¨ setInterval ƒë·ªÉ x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô t·ªët h∆°n
        for(let i=1;i<path.length;i++){
            if (currentAlgo !== "A*") break; // D·ª´ng n·∫øu ng∆∞·ªùi d√πng nh·∫•n n√∫t kh√°c
            await new Promise(r=>setTimeout(r,100));
            prevPos = [...robotPos];
            robotPos = path[i];
            // L·∫•y visited waypoints t·ª´ state cu·ªëi c√πng thay v√¨ c·∫≠p nh·∫≠t t·ª´ng b∆∞·ªõc
        }
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i cu·ªëi c√πng t·ª´ server
        visitedWaypoints = data.visited_waypoints||[];
        drawGridOnce(); // V·∫Ω l·∫°i grid ƒë·ªÉ c·∫≠p nh·∫≠t visited waypoints
        updateRobot(prevPos, data.state);

        updateStats(
            data.algorithm,
            data.reward.toFixed(1),
            data.steps,
            `${data.visited_waypoints.length}/${waypoints.length}`
        );

        resultDiv.innerHTML = `
            ‚úÖ <strong>${data.algorithm}</strong><br>
            üéØ Reward: ${data.reward.toFixed(1)}<br>
            üë£ Steps: ${data.steps}<br>
            üìç Waypoints: ${data.visited_waypoints.length}/${waypoints.length}<br>
            ${data.done ? "üèÜ <strong>Robot ƒë√£ ƒë·∫øn ƒë√≠ch!</strong>" : ""}
        `;

        updateChart();
    } catch(e){
        console.error(e); 
        resultDiv.innerHTML = "‚ùå C√≥ l·ªói x·∫£y ra khi ch·∫°y A*";
    } finally {
        stopAll();
    }
}

// ---------------- Draw & Clear Trajectory ----------------
function drawTrajectory(){
    // Ch·ª©c nƒÉng n√†y t·∫°m th·ªùi b·ªã v√¥ hi·ªáu h√≥a v√¨ logic ph·ª©c t·∫°p h∆°n v·ªõi A*
    // S·∫Ω c·∫ßn m·ªôt c√°ch ti·∫øp c·∫≠n kh√°c ƒë·ªÉ v·∫Ω ƒë∆∞·ªùng ƒëi ch√≠nh x√°c
    clearTrajectory();
}

function clearTrajectory(){
    let canvas=document.getElementById("trajectory");
    if (canvas) {
        let ctx=canvas.getContext("2d");
        ctx.clearRect(0,0,canvas.width,canvas.height);
    }
}

// ---------------- Update Stats ----------------
function updateStats(algo, reward, steps, wp){
    document.getElementById("current-algorithm").innerText = algo;
    document.getElementById("current-reward").innerText = reward;
    document.getElementById("current-steps").innerText = steps;
    document.getElementById("current-waypoints").innerText = wp;
}

// ---------------- Kh·ªüi t·∫°o ----------------
// Thay th·∫ø resetGrid() b·∫±ng initializeSession()
initializeSession();